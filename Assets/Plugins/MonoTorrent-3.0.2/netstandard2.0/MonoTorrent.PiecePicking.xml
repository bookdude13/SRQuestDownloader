<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonoTorrent.PiecePicking</name>
    </assembly>
    <members>
        <member name="T:MonoTorrent.PiecePicking.StandardPicker.Block">
             <summary>
            
             </summary>
        </member>
        <member name="P:MonoTorrent.PiecePicking.StandardPicker.Piece.Abandoned">
            <summary>
            Set to true when the original peer times out sending a piece, disconnects, or chokes us.
            This allows other peers to immediately begin downloading blocks from this piece to complete
            it.
            </summary>
        </member>
        <member name="M:MonoTorrent.PiecePicking.IPiecePicker.CancelRequests(MonoTorrent.PiecePicking.IRequester,System.Int32,System.Int32,System.Span{MonoTorrent.PiecePicking.PieceSegment})">
            <summary>
            Cancel all unreceived requests between startIndex and endIndex.
            </summary>
            <param name="peer">The peer to request the block from</param>
            <param name="startIndex">The lowest piece index to consider</param>
            <param name="endIndex">The highest piece index to consider</param>
            <param name="cancellations"></param>
            <returns>The number of entries written to the span</returns>
        </member>
        <member name="M:MonoTorrent.PiecePicking.IPiecePicker.ContinueAnyExistingRequest(MonoTorrent.PiecePicking.IRequester,MonoTorrent.ReadOnlyBitField,System.Int32,System.Int32,System.Int32,MonoTorrent.PiecePicking.PieceSegment@)">
            <summary>
            Request any unrequested block from a piece owned by this peer, or any other peer, within the specified bounds.
            </summary>
            <param name="peer">The peer to request the block from</param>
            <param name="available"></param>
            <param name="startIndex">The lowest piece index to consider</param>
            <param name="endIndex">The highest piece index to consider</param>
            <param name="maxDuplicateRequests">The maximum number of concurrent duplicate requests</param>
            <returns></returns>
            <param name="segment"></param>
        </member>
        <member name="M:MonoTorrent.PiecePicking.IPiecePicker.ContinueExistingRequest(MonoTorrent.PiecePicking.IRequester,System.Int32,System.Int32,MonoTorrent.PiecePicking.PieceSegment@)">
            <summary>
            Request the next unrequested block from a piece owned by this peer, within the specified bounds.
            </summary>
            <param name="peer">The peer to request the block from</param>
            <param name="startIndex">The lowest piece index to consider</param>
            <param name="endIndex">The highest piece index to consider</param>
            <param name="segment">If an existing block is successfully continued, the details for that block will be set here</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.PiecePicking.IPiecePicker.CurrentReceivedCount">
            <summary>
            Returns the number of blocks which have been received f pieces currently being requested.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.PiecePicking.IPiecePicker.CurrentRequestCount">
            <summary>
            Returns the number of pieces currently being requested.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.PiecePicking.IPiecePicker.ExportActiveRequests">
            <summary>
            Returns a list of all
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.PiecePicking.IPiecePicker.Initialise(MonoTorrent.PiecePicking.IPieceRequesterData)">
            <summary>
            Reset all internal state.
            </summary>
            <param name="torrentData"></param>
        </member>
        <member name="M:MonoTorrent.PiecePicking.IPiecePicker.IsInteresting(MonoTorrent.PiecePicking.IRequester,MonoTorrent.ReadOnlyBitField)">
            <summary>
            
            </summary>
            <param name="peer"></param>
            <param name="bitfield"></param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.PiecePicking.IPiecePicker.RequestRejected(MonoTorrent.PiecePicking.IRequester,MonoTorrent.PiecePicking.PieceSegment)">
            <summary>
            Called when a piece request has been rejected by a <paramref name="peer"/>, which indicates
            the <see cref="T:MonoTorrent.PiecePicking.PieceSegment"/> will not be fulfilled.
            </summary>
            <param name="peer"></param>
            <param name="request"></param>
        </member>
        <member name="M:MonoTorrent.PiecePicking.IPiecePicker.PickPiece(MonoTorrent.PiecePicking.IRequester,MonoTorrent.ReadOnlyBitField,System.ReadOnlySpan{MonoTorrent.ReadOnlyBitField},System.Int32,System.Int32,System.Span{MonoTorrent.PiecePicking.PieceSegment})">
            <summary>
            
            </summary>
            <param name="peer"></param>
            <param name="available"></param>
            <param name="otherAvailable"></param>
            <param name="startIndex"></param>
            <param name="endIndex"></param>
            <param name="requests"></param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.PiecePicking.IPiecePicker.ValidatePiece(MonoTorrent.PiecePicking.IRequester,MonoTorrent.PiecePicking.PieceSegment,System.Boolean@,System.Collections.Generic.HashSet{MonoTorrent.PiecePicking.IRequester})">
            <summary>
            Called when a piece is received from the <paramref name="peer"/>. Returns true if the
            piece was requested from this peer and should be accepted, otherwise returns false if the piece was not requested from this peer and should
            be discarded.
            </summary>
            <param name="peer"></param>
            <param name="request"></param>
            <param name="pieceComplete">True if this was the final block for the piece</param>
            <param name="peersInvolved">When <paramref name="pieceComplete"/> is true this is a non-null list of peers used to download the piece. Otherwise this is null.</param>
            <returns></returns>
        </member>
        <member name="P:MonoTorrent.PiecePicking.StreamingPieceRequester.HighPriorityPieceIndex">
            <summary>
            This is the piece index of the block of data currently being consumed by the
            media player or other program.
            </summary>
        </member>
        <member name="P:MonoTorrent.PiecePicking.StreamingPieceRequester.HighPriorityCount">
            <summary>
            The number of pieces which will be kept buffered to avoid stuttering while streaming media.
            </summary>
        </member>
        <member name="M:MonoTorrent.PiecePicking.StreamingPieceRequester.SeekToPosition(MonoTorrent.ITorrentManagerFile,System.Int64)">
            <summary>
            Cancel any pending requests and then issue new requests so we immediately download pieces from the new high
            priority set.
            </summary>
            <param name="file"></param>
            <param name="position"></param>
        </member>
        <member name="M:MonoTorrent.PiecePicking.StreamingPieceRequester.ReadToPosition(MonoTorrent.ITorrentManagerFile,System.Int64)">
            <summary>
            Inform the picker that we have sequentially read data and so will need to update the high priority set without
            cancelling pending requests.
            </summary>
            <param name="file"></param>
            <param name="position"></param>
        </member>
        <member name="P:MonoTorrent.GitInfoHelper.ClientVersion">
            <summary>
            The current version of the client in the form "MO1234", which represents a version triplet of '1.2.34'.
            </summary>
        </member>
        <member name="F:MonoTorrent.GitInfoHelper.Version">
            <summary>
            The full version of this library in the form 'A.B.C'.
            'A' and 'B' are guaranteed to be 1 digit each. 'C' can be one or two digits.
            </summary>
        </member>
        <member name="T:ThisAssembly">
            <summary>Provides access to the current assembly information.</summary>
        </member>
        <member name="T:ThisAssembly.Git">
            <summary>Provides access to the git information for the current assembly.</summary>
        </member>
        <member name="F:ThisAssembly.Git.IsDirty">
            <summary>IsDirty: false</summary>
        </member>
        <member name="F:ThisAssembly.Git.IsDirtyString">
            <summary>IsDirtyString: false</summary>
        </member>
        <member name="F:ThisAssembly.Git.RepositoryUrl">
            <summary>Repository URL: git@github.com:alanmcgovern/monotorrent</summary>
        </member>
        <member name="F:ThisAssembly.Git.Branch">
            <summary>Branch: master</summary>
        </member>
        <member name="F:ThisAssembly.Git.Commit">
            <summary>Commit: e78faebd</summary>
        </member>
        <member name="F:ThisAssembly.Git.Sha">
            <summary>Sha: e78faebd0aec117146cffccaaea987ab0629eec0</summary>
        </member>
        <member name="F:ThisAssembly.Git.CommitDate">
            <summary>Commit date: 2024-08-04T11:51:08+01:00</summary>
        </member>
        <member name="F:ThisAssembly.Git.Commits">
            <summary>Commits on top of base version: 0</summary>
        </member>
        <member name="F:ThisAssembly.Git.Tag">
            <summary>Tag: </summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseTag">
            <summary>Base tag: </summary>
        </member>
        <member name="T:ThisAssembly.Git.BaseVersion">
            <summary>Provides access to the base version information used to determine the <see cref="T:ThisAssembly.Git.SemVer" />.</summary>      
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Major">
            <summary>Major: 3</summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Minor">
            <summary>Minor: 0</summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Patch">
            <summary>Patch: 2</summary>
        </member>
        <member name="T:ThisAssembly.Git.SemVer">
            <summary>Provides access to SemVer information for the current assembly.</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Major">
            <summary>Major: 3</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Minor">
            <summary>Minor: 0</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Patch">
            <summary>Patch: 2</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Label">
            <summary>Label: </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.DashLabel">
            <summary>Label with dash prefix: </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Source">
            <summary>Source: File</summary>
        </member>
    </members>
</doc>
