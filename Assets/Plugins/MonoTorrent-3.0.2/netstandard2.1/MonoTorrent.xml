<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonoTorrent</name>
    </assembly>
    <members>
        <member name="T:MonoTorrent.BitFieldData">
            <summary>
            This class is for represting the Peer's bitfield
            </summary>
        </member>
        <member name="M:MonoTorrent.BitFieldData.FirstTrue">
            <summary>
            Returns the index of the first <see langword="true" /> bit in the bitfield.
            Returns -1 if no <see langword="true" /> bit is found. />
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.BitFieldData.FirstTrue(System.Int32,System.Int32)">
            <summary>
            Returns the index of the first <see langword="true" /> bit between <paramref name="startIndex"/> and <paramref name="endIndex"/> (inclusive).
            Returns -1 if no <see langword="true" /> bit is found. />
            </summary>
            <param name="startIndex">The first index to check</param>
            <param name="endIndex">The last index to check</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.BitFieldData.FirstFalse">
            <summary>
            Returns the index of the first <see langword="false" /> bit in the bitfield.
            Returns -1 if no <see langword="false" /> bit is found. />
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.BitFieldData.FirstFalse(System.Int32,System.Int32)">
            <summary>
            Returns the index of the first <see langword="false" /> bit between <paramref name="startIndex"/> and <paramref name="endIndex"/> (inclusive).
            Returns -1 if no <see langword="false" /> bit is found. />
            </summary>
            <param name="startIndex">The first index to check</param>
            <param name="endIndex">The last index to check</param>
            <returns></returns>
        </member>
        <member name="E:MonoTorrent.Connections.Peer.ILocalPeerDiscovery.PeerFound">
            <summary>
            This event is raised whenever a peer is discovered.
            </summary>
        </member>
        <member name="M:MonoTorrent.Connections.Peer.ILocalPeerDiscovery.Announce(MonoTorrent.InfoHash,System.Net.IPEndPoint)">
            <summary>
            Send an announce request for this InfoHash to all available network adapters.
            </summary>
            <param name="infoHash"></param>
            <param name="listeningPort">The TCP port used to accept incoming connections.</param>
            <returns></returns>
        </member>
        <member name="P:MonoTorrent.Connections.Peer.IPeerConnection.EndPoint">
            <summary>
            The endpoint of the remote peer. Will be null for web seeds or http seeds.
            </summary>
        </member>
        <member name="P:MonoTorrent.Connections.Peer.IPeerConnectionListener.LocalEndPoint">
            <summary>
            The EndPoint to which the Listener is bound.
            </summary>
        </member>
        <member name="P:MonoTorrent.Connections.Peer.IPeerConnectionListener.PreferredLocalEndPoint">
            <summary>
            The EndPoint to which the Listener will attempt to be bound. If the preferred endpoint has it's port set to 0, then
            the actual port the listener is bound to will be set in the <see cref="P:MonoTorrent.Connections.Peer.IPeerConnectionListener.LocalEndPoint"/> property after <see cref="M:MonoTorrent.Connections.IListener.Start"/>
            has been invoked.
            </summary>
        </member>
        <member name="T:MonoTorrent.Connections.TrackerServer.ITrackerListener">
            <summary>
            Listens for incoming Announce or Scrape requests and sends the response back.
            </summary>
        </member>
        <member name="P:MonoTorrent.Connections.Tracker.ITrackerConnection.CanScrape">
            <summary>
            True if the tracker supports Scrape requests.
            </summary>
        </member>
        <member name="P:MonoTorrent.Connections.Tracker.ITrackerConnection.Uri">
            <summary>
            The uri for the tracker
            </summary>
        </member>
        <member name="M:MonoTorrent.Connections.Tracker.ITrackerConnection.AnnounceAsync(MonoTorrent.Trackers.AnnounceRequest,System.Threading.CancellationToken)">
            <summary>
            Send an announce request to the tracker.
            </summary>
            <param name="requestParameters"></param>
            <param name="token">The token used to cancel the request.</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Connections.Tracker.ITrackerConnection.ScrapeAsync(MonoTorrent.Trackers.ScrapeRequest,System.Threading.CancellationToken)">
            <summary>
            Send a scrape request to the tracker.
            </summary>
            <param name="requestParameters"></param>
            <param name="token">The token used to cancel the request.</param>
            <returns></returns>
        </member>
        <member name="F:MonoTorrent.Connections.EncryptionType.PlainText">
            <summary>
            Nothing is encrypted. This is the fastest but allows deep packet inspection to detect
            the bittorrent handshake. If connections are being closed before the handshake completes,
            or very soon after it completes, then it's possible that the ISP is closing them, and so
            RC4 based methods may prevent that from happening.
            </summary>
        </member>
        <member name="F:MonoTorrent.Connections.EncryptionType.RC4Header">
            <summary>
            Encryption is applied to the initial handshaking process only. Once the connection has
            been established all further data is sent in plain text. This is the second fastest
            and should prevent deep packet inspection from detecting the bittorrent handshake.
            </summary>
        </member>
        <member name="F:MonoTorrent.Connections.EncryptionType.RC4Full">
            <summary>
            Encryption is applied to the initial handshake and to all subsequent data transfers.
            </summary>
        </member>
        <member name="P:MonoTorrent.Dht.ITransferMonitor.BytesSent">
            <summary>
            Total bytes sent since the start of the session.
            </summary>
        </member>
        <member name="P:MonoTorrent.Dht.ITransferMonitor.BytesReceived">
            <summary>
            Total bytes received since the start of the session.
            </summary>
        </member>
        <member name="P:MonoTorrent.Dht.ITransferMonitor.DownloadRate">
            <summary>
            Estimate of the amount of data received every second, in bytes/second.
            </summary>
        </member>
        <member name="P:MonoTorrent.Dht.ITransferMonitor.UploadRate">
            <summary>
            Estimate of the amount of data sent every second, in bytes/second.
            </summary>
        </member>
        <member name="P:MonoTorrent.Logging.LoggerFactory.Factory">
            <summary>
            The factory method used to create new ILogger instances. The <see cref="T:System.String"/> parameter
            is the <see cref="P:System.Type.FullName"/> for the class the ILogger is associated with. You can
            return <see langword="null"/> for any class to disable logging for that class.
            </summary>
        </member>
        <member name="T:MonoTorrent.PiecePicking.IPieceRequester">
            <summary>
            Allows an IPiecePicker implementation to create piece requests for
            specific peers and then add them to the peers message queue. If the
            limits on maximum concurrent piece requests are ignored
            </summary>
        </member>
        <member name="P:MonoTorrent.PiecePicking.IPieceRequester.InEndgameMode">
            <summary>
            Should return <see langword="true"/> if the underlying piece picking algorithm
            has entered 'endgame mode' as defined by the bittorrent specification.
            </summary>
        </member>
        <member name="M:MonoTorrent.PiecePicking.IPieceRequester.AddRequests(System.ReadOnlySpan{System.ValueTuple{MonoTorrent.PiecePicking.IRequester,MonoTorrent.ReadOnlyBitField}})">
            <summary>
            Should enqueue piece requests for any peer who is has capacity.
            </summary>
            <param name="peers"></param>
        </member>
        <member name="M:MonoTorrent.PiecePicking.IPieceRequester.AddRequests(MonoTorrent.PiecePicking.IRequester,MonoTorrent.ReadOnlyBitField,System.ReadOnlySpan{MonoTorrent.ReadOnlyBitField})">
            <summary>
            Attempts to enqueue more requests for the specified peer.
            </summary>
            <param name="peer"></param>
            <param name="available"></param>
            <param name="peers"></param>
        </member>
        <member name="M:MonoTorrent.PiecePicking.IPieceRequester.ValidatePiece(MonoTorrent.PiecePicking.IRequester,MonoTorrent.PiecePicking.PieceSegment,System.Boolean@,System.Collections.Generic.HashSet{MonoTorrent.PiecePicking.IRequester})">
            <summary>
            
            </summary>
            <param name="peer"></param>
            <param name="pieceSegment"></param>
            <param name="pieceComplete"></param>
            <param name="peersInvolved"></param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.PiecePicking.IPieceRequester.IsInteresting(MonoTorrent.PiecePicking.IRequester,MonoTorrent.ReadOnlyBitField)">
            <summary>
            
            </summary>
            <param name="peer"></param>
            <param name="bitField"></param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.PiecePicking.IPieceRequester.Initialise(MonoTorrent.PiecePicking.IPieceRequesterData,MonoTorrent.PiecePicking.IMessageEnqueuer,System.ReadOnlySpan{MonoTorrent.ReadOnlyBitField})">
            <summary>
            
            </summary>
            <param name="torrentData">The files, size and piecelength for the torrent.</param>
            <param name="enqueuer">Enqueues request, or cancellation, messages with the peer</param>
            <param name="ignorableBitfields"> These bitfields represent pieces which have successfully
            downloaded and passed a hash check, pieces which have successfully downloaded but have not hash checked yet or
            pieces which have not yet been hash checked by the library and so it is not known whether they should be requested or not.
            </param>
        </member>
        <member name="M:MonoTorrent.PiecePicking.IRequester.PreferredRequestAmount(System.Int32)">
            <summary>
            Returns the number of blocks to request. If the value is greater than 1 it will be
            rounded up to 1 full piece.
            </summary>
            <param name="pieceLength"></param>
            <returns></returns>
        </member>
        <member name="T:MonoTorrent.PiecePicking.IStreamingPieceRequester">
            <summary>
            Allows files to be accessed while they are downloading
            </summary>
        </member>
        <member name="M:MonoTorrent.PiecePicking.IStreamingPieceRequester.SeekToPosition(MonoTorrent.ITorrentManagerFile,System.Int64)">
            <summary>
            Cancel any pending requests and then issue new requests so we immediately download pieces from the new high
            priority set.
            </summary>
            <param name="file"></param>
            <param name="position"></param>
        </member>
        <member name="M:MonoTorrent.PiecePicking.IStreamingPieceRequester.ReadToPosition(MonoTorrent.ITorrentManagerFile,System.Int64)">
            <summary>
            Inform the picker that we have sequentially read data and so will need to update the high priority set without
            cancelling pending requests.
            </summary>
            <param name="file"></param>
            <param name="position"></param>
        </member>
        <member name="P:MonoTorrent.PiecePicking.PieceRequesterSettings.AllowPrioritisation">
            <summary>
            When set to false, <see cref="P:MonoTorrent.ITorrentManagerFile.Priority"/> is not taken into account when choosing pieces. Files marked as 'DoNotDownload' will be downloaded.
            Defaults to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:MonoTorrent.PiecePicking.PieceRequesterSettings.AllowRandomised">
            <summary>
            When set to false, pieces will be selected sequentially. If <see cref="P:MonoTorrent.PiecePicking.PieceRequesterSettings.AllowRarestFirst"/> is enabled, then set of pieces which will be available to choose from will be reduced to the 'rarest' set first,
            and then the picker will choose sequentially from that subset. If you need true linear picking, you must disable <see cref="P:MonoTorrent.PiecePicking.PieceRequesterSettings.AllowRandomised"/> as well as <see cref="P:MonoTorrent.PiecePicking.PieceRequesterSettings.AllowRarestFirst"/>.
            Defaults to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:MonoTorrent.PiecePicking.PieceRequesterSettings.AllowRarestFirst">
            <summary>
            When set to false, the rarest subset of pieces will not be computed.
            Defaults to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:MonoTorrent.PiecePicking.PieceRequesterSettings.MaximumDuplicateRequests">
            <summary>
            The maximum number of concurrent requests which will be issued for the same block of data during 'end game' mode.
            A higher value can decrease the time it takes for the final few pieces to be received at the cost of downloading
            excess data. Blocks which are not received within a reasonable amount of time will be re-requested from another peer.
            Defaults to 2.
            </summary>
        </member>
        <member name="E:MonoTorrent.PieceWriter.IBlockCache.ReadFromCache">
            <summary>
            This event is raised every time a block is successfully read from the cache
            </summary>
        </member>
        <member name="E:MonoTorrent.PieceWriter.IBlockCache.ReadThroughCache">
            <summary>
            This event is raised every time a block cannot be read from the cache, and is read from
            the underlying <see cref="T:MonoTorrent.PieceWriter.IPieceWriter"/> instead.
            </summary>
        </member>
        <member name="E:MonoTorrent.PieceWriter.IBlockCache.WrittenToCache">
            <summary>
            This event is raised when a block is written to the cache.
            </summary>
        </member>
        <member name="E:MonoTorrent.PieceWriter.IBlockCache.WrittenThroughCache">
            <summary>
            This event is raised when a new block is written directly by the underlying <see cref="T:MonoTorrent.PieceWriter.IPieceWriter"/>,
            or when a block is removed from the cache and is written by the underlying <see cref="T:MonoTorrent.PieceWriter.IPieceWriter"/>.
            </summary>
        </member>
        <member name="P:MonoTorrent.PieceWriter.IBlockCache.CacheHits">
            <summary>
            The number of bytes read from the cache.
            </summary>
        </member>
        <member name="P:MonoTorrent.PieceWriter.IBlockCache.CacheUsed">
            <summary>
            The number of bytes currently used by the cache.
            </summary>
        </member>
        <member name="P:MonoTorrent.PieceWriter.IBlockCache.Capacity">
            <summary>
            The capacity of the cache, in bytes.
            </summary>
        </member>
        <member name="P:MonoTorrent.PieceWriter.IBlockCache.Writer">
            <summary>
            Pieces will be written to this <see cref="T:MonoTorrent.PieceWriter.IPieceWriter"/> when they are evicted from the cache.
            </summary>
        </member>
        <member name="M:MonoTorrent.PieceWriter.IBlockCache.ReadAsync(MonoTorrent.ITorrentManagerInfo,MonoTorrent.BlockInfo,System.Memory{System.Byte})">
            <summary>
            Reads data from the cache and flushes it to disk, or reads the data from disk if it is not available in the cache.
            </summary>
            <param name="torrent"></param>
            <param name="block"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.PieceWriter.IBlockCache.ReadFromCacheAsync(MonoTorrent.ITorrentManagerInfo,MonoTorrent.BlockInfo,System.Memory{System.Byte})">
            <summary>
            If the block of data is available in the cache, the data is read into the buffer and the method returns true.
            If the block is unavailable, the buffer will not be modified and the method will return false.
            </summary>
            <param name="torrent"></param>
            <param name="block"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.PieceWriter.IBlockCache.SetCapacityAsync(System.Int64)">
            <summary>
            Set the max capacity, in bytes.
            </summary>
            <param name="capacity"></param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.PieceWriter.IBlockCache.SetPolicyAsync(MonoTorrent.PieceWriter.CachePolicy)">
            <summary>
            Sets the cache policy.
            </summary>
            <param name="policy"></param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.PieceWriter.IBlockCache.WriteAsync(MonoTorrent.ITorrentManagerInfo,MonoTorrent.BlockInfo,System.Memory{System.Byte},System.Boolean)">
            <summary>
            
            </summary>
            <param name="torrent"></param>
            <param name="block"></param>
            <param name="buffer"></param>
            <param name="preferSkipCache"></param>
            <returns></returns>
        </member>
        <member name="P:MonoTorrent.PortForwarding.IPortForwarder.Active">
            <summary>
            True if the port forwarding is enabled
            </summary>
        </member>
        <member name="P:MonoTorrent.PortForwarding.IPortForwarder.Mappings">
            <summary>
            The list of mappings which have been registered. If the mapping was successfully established it will
            be in the <see cref="P:MonoTorrent.PortForwarding.Mappings.Created"/> list. If an error occurred creating the mapping it will be
            in the <see cref="P:MonoTorrent.PortForwarding.Mappings.Failed"/> list, otherwise it will be in the <see cref="P:MonoTorrent.PortForwarding.Mappings.Pending"/>
            list.
            </summary>
        </member>
        <member name="M:MonoTorrent.PortForwarding.IPortForwarder.RegisterMappingAsync(MonoTorrent.PortForwarding.Mapping)">
            <summary>
            Forwards a port on a NAT-PMP or uPnP capable router.
            </summary>
            <param name="mapping">The mapping to try and create.</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.PortForwarding.IPortForwarder.UnregisterMappingAsync(MonoTorrent.PortForwarding.Mapping,System.Threading.CancellationToken)">
            <summary>
            Removes a port forwarding mapping from the router.
            </summary>
            <param name="mapping">The mapping to remove from the router. to use for the external and internal port number.</param>
            <param name="token">If the token is cancelled then the port map may not be fully removed from the router.</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.PortForwarding.IPortForwarder.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Begins searching for any compatible port forwarding devices. Refreshes any forwarded ports automatically
            before the mapping expires.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.PortForwarding.IPortForwarder.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Removes any port map requests and stops searching for compatible port forwarding devices. Cancels any pending
            ForwardPort requests.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.PortForwarding.IPortForwarder.StopAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Removes any port map requests and stops searching for compatible port forwarding devices. Cancels any pending
            ForwardPort requests.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MonoTorrent.PortForwarding.Mapping.PublicPort">
            <summary>
            Connections made to the <see cref="P:MonoTorrent.PortForwarding.Mapping.PublicPort"/> port will be forwarded to the <see cref="P:MonoTorrent.PortForwarding.Mapping.PrivatePort"/>.
            </summary>
        </member>
        <member name="P:MonoTorrent.PortForwarding.Mapping.PrivatePort">
            <summary>
            The internal port bound by a local socket/listener.
            </summary>
        </member>
        <member name="P:MonoTorrent.PortForwarding.Mapping.Protocol">
            <summary>
            The protocol which has been mapped.
            </summary>
        </member>
        <member name="M:MonoTorrent.PortForwarding.Mapping.#ctor(MonoTorrent.PortForwarding.Protocol,System.Int32)">
            <summary>
            
            </summary>
            <param name="protocol"></param>
            <param name="port"></param>
        </member>
        <member name="P:MonoTorrent.PortForwarding.Mappings.Created">
            <summary>
            A list of mappings which have been successfully created
            </summary>
        </member>
        <member name="P:MonoTorrent.PortForwarding.Mappings.Pending">
            <summary>
            A list of mappings which will be created as soon as a compatible uPnP or NAT-PMP router
            is discovered.
            </summary>
        </member>
        <member name="P:MonoTorrent.PortForwarding.Mappings.Failed">
            <summary>
            A list of mappings which could not be created. This can happen if the public port is already
            in use and is mapped to a different IP address in the local network.
            </summary>
        </member>
        <member name="P:MonoTorrent.TrackerServer.AnnounceRequest.ClientAddress">
            <summary>
            This is the IPAddress/Port that the client is listening for incoming connections on. If the
            announce request contained an 'ip' parameter then it is used, otherwise the actual IP from the
            request is used.
            </summary>
        </member>
        <member name="P:MonoTorrent.TrackerServer.AnnounceRequest.Downloaded">
            <summary>
            The total number of bytes downloaded since the 'Started' event was sent.
            </summary>
        </member>
        <member name="P:MonoTorrent.TrackerServer.AnnounceRequest.Event">
            <summary>
            The event, if any, associated with this announce
            </summary>
        </member>
        <member name="P:MonoTorrent.TrackerServer.AnnounceRequest.Left">
            <summary>
            The number of bytes which still need to be downloaded to make the torrent 100% complete.
            </summary>
        </member>
        <member name="P:MonoTorrent.TrackerServer.AnnounceRequest.HasRequestedCompact">
            <summary>
            True if the peers should be returned in compact form.
            </summary>
        </member>
        <member name="P:MonoTorrent.TrackerServer.AnnounceRequest.InfoHash">
            <summary>
            The infohash of the torrent this request is associated with.
            </summary>
        </member>
        <member name="P:MonoTorrent.TrackerServer.AnnounceRequest.Key">
            <summary>
            An arbitrary identifier generated by the client which can be used to track the client even if
            it's IP address changes. This is never shared with other peers.
            </summary>
        </member>
        <member name="P:MonoTorrent.TrackerServer.AnnounceRequest.IsValid">
            <summary>
            Returns false if any required parameters are missing from the request. If this occurs the 'Response'
            dictionary will be populated with the appropriate error message.
            </summary>
        </member>
        <member name="P:MonoTorrent.TrackerServer.AnnounceRequest.NumberWanted">
            <summary>
            The number of peers the client wants to receive. If unspecified then the tracker default amount
            be returned.
            </summary>
        </member>
        <member name="P:MonoTorrent.TrackerServer.AnnounceRequest.PeerId">
            <summary>
            The 20 byte identifier for the peer. This is shared with other peers when a non-compact response
            is returned.
            </summary>
        </member>
        <member name="P:MonoTorrent.TrackerServer.AnnounceRequest.Port">
            <summary>
            The port the client is listening for incoming connections on.
            </summary>
        </member>
        <member name="P:MonoTorrent.TrackerServer.AnnounceRequest.TrackerId">
            <summary>
            The first time a peer announces to a tracker, we send it the TrackerId
            of this tracker. Subsequent announce requests should send that value.
            </summary>
        </member>
        <member name="P:MonoTorrent.TrackerServer.AnnounceRequest.Uploaded">
            <summary>
            The total amount of bytes uploaded since the 'Started' event was sent.
            </summary>
        </member>
        <member name="P:MonoTorrent.TrackerServer.ScrapeRequest.InfoHashes">
            <summary>
            The list of infohashes contained in the scrape request
            </summary>
        </member>
        <member name="P:MonoTorrent.TrackerServer.ScrapeRequest.IsValid">
            <summary>
            Returns false if any required parameters are missing from the original request.
            </summary>
        </member>
        <member name="P:MonoTorrent.TrackerServer.TrackerRequest.Parameters">
            <summary>
            The raw (url-encoded) key/value pairs from the original query string
            </summary>
        </member>
        <member name="P:MonoTorrent.TrackerServer.TrackerRequest.Response">
            <summary>
            The BEncodedDictionary which will be sent back to the client who initiated this request
            </summary>
        </member>
        <member name="P:MonoTorrent.TrackerServer.TrackerRequest.RemoteAddress">
            <summary>
            The IPAddress for the remote client who initiated this request.
            </summary>
        </member>
        <member name="P:MonoTorrent.Trackers.AnnounceResponse.Peers">
            <summary>
            The list of peers returned by the tracker.
            </summary>
        </member>
        <member name="P:MonoTorrent.Trackers.ITracker.CanScrape">
            <summary>
            True if the tracker supports Scrape requests.
            </summary>
        </member>
        <member name="P:MonoTorrent.Trackers.ITracker.MinUpdateInterval">
            <summary>
            The minimum interval between announce requests.
            </summary>
        </member>
        <member name="P:MonoTorrent.Trackers.ITracker.UpdateInterval">
            <summary>
            The recommended interval between announce requests.
            </summary>
        </member>
        <member name="P:MonoTorrent.Trackers.ITracker.TimeSinceLastAnnounce">
            <summary>
            The time since the last announce request was sent.
            </summary>
        </member>
        <member name="P:MonoTorrent.Trackers.ITracker.Status">
            <summary>
            The status of the tracker after the most recent announce request.
            </summary>
        </member>
        <member name="P:MonoTorrent.Trackers.ITracker.Uri">
            <summary>
            The uri for the tracker
            </summary>
        </member>
        <member name="P:MonoTorrent.Trackers.ITracker.WarningMessage">
            <summary>
            The warning message sent with the most recent announce request.
            </summary>
        </member>
        <member name="P:MonoTorrent.Trackers.ITracker.FailureMessage">
            <summary>
            The failure message sent with the most recent announce request.
            </summary>
        </member>
        <member name="M:MonoTorrent.Trackers.ITracker.AnnounceAsync(MonoTorrent.Trackers.AnnounceRequest,System.Threading.CancellationToken)">
            <summary>
            Send an announce request to the tracker.
            </summary>
            <param name="requestParameters"></param>
            <param name="token">The token used to cancel the request.</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.Trackers.ITracker.ScrapeAsync(MonoTorrent.Trackers.ScrapeRequest,System.Threading.CancellationToken)">
            <summary>
            Send a scrape request to the tracker.
            </summary>
            <param name="requestParameters"></param>
            <param name="token">The token used to cancel the request.</param>
            <returns></returns>
        </member>
        <member name="P:MonoTorrent.Trackers.TrackerResponse.FailureMessage">
            <summary>
            The failure message returned by the tracker.
            </summary>
        </member>
        <member name="P:MonoTorrent.Trackers.TrackerResponse.ScrapeInfo">
            <summary>
            The 'downloaded', 'complete' and 'incomplete' stats for each infohash.
            'downloaded' is the total number of peers which downloaded the torrent.
            'complete' is the current number of active seeders.
            'incomplete' is the current number of active downloaders.
            </summary>
        </member>
        <member name="P:MonoTorrent.Trackers.TrackerResponse.State">
            <summary>
            The status of the tracker after this request.
            </summary>
        </member>
        <member name="P:MonoTorrent.Trackers.TrackerResponse.WarningMessage">
            <summary>
            The warning message returned by the tracker.
            </summary>
        </member>
        <member name="F:MonoTorrent.Trackers.TrackerState.Unknown">
            <summary>
            A request has not been sent yet.
            </summary>
        </member>
        <member name="F:MonoTorrent.Trackers.TrackerState.Connecting">
            <summary>
            Currently sending a request.
            </summary>
        </member>
        <member name="F:MonoTorrent.Trackers.TrackerState.Ok">
            <summary>
            The most recent request completed successfully.
            </summary>
        </member>
        <member name="F:MonoTorrent.Trackers.TrackerState.Offline">
            <summary>
            The tracker was unreachable/offline.
            </summary>
        </member>
        <member name="F:MonoTorrent.Trackers.TrackerState.InvalidResponse">
            <summary>
            The tracker was reachable but the response it sent was invalid.
            </summary>
        </member>
        <member name="M:MonoTorrent.BitField.FirstFalse">
            <summary>
            Returns the index of the first <see langword="false" /> bit in the bitfield.
            Returns -1 if no <see langword="false" /> bit is found. />
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.BitField.FirstFalse(System.Int32,System.Int32)">
            <summary>
            Returns the index of the first <see langword="false" /> bit between <paramref name="startIndex"/> and <paramref name="endIndex"/> (inclusive).
            Returns -1 if no <see langword="false" /> bit is found. />
            </summary>
            <param name="startIndex">The first index to check</param>
            <param name="endIndex">The last index to check</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.BitField.FirstTrue">
            <summary>
            Returns the index of the first <see langword="true" /> bit in the bitfield.
            Returns -1 if no <see langword="true" /> bit is found. />
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.BitField.FirstTrue(System.Int32,System.Int32)">
            <summary>
            Returns the index of the first <see langword="true" /> bit between <paramref name="startIndex"/> and <paramref name="endIndex"/> (inclusive).
            Returns -1 if no <see langword="true" /> bit is found. />
            </summary>
            <param name="startIndex">The first index to check</param>
            <param name="endIndex">The last index to check</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.ByteBufferPool.#ctor">
            <summary>
            The class that controls the allocating and deallocating of all byte[] buffers used in the engine.
            </summary>
        </member>
        <member name="F:MonoTorrent.Constants.BlockSize">
            <summary>
            Blocks are always 16kB
            </summary>
        </member>
        <member name="F:MonoTorrent.Constants.MaximumPieceLength">
            <summary>
            Maximum supported piece length. Value is in bytes.
            </summary>
        </member>
        <member name="F:MonoTorrent.Constants.DefaultMaxPendingRequests">
            <summary>
            The default maximum concurrent requests which can be made to a single peer.
            </summary>
        </member>
        <member name="F:MonoTorrent.Constants.HandshakeLengthV100">
            <summary>
            The length of the initial handshake message, in bytes, for a V1 connection
            </summary>
        </member>
        <member name="F:MonoTorrent.Constants.ProtocolStringV100">
            <summary>
            Protocol string for version 1.0 of Bittorrent Protocol
            </summary>
        </member>
        <member name="M:MonoTorrent.InfoHash.#ctor(System.Byte[])">
            <summary>
            Clones the provided byte[] before storing the value internally.
            </summary>
            <param name="infoHash"></param>
        </member>
        <member name="M:MonoTorrent.InfoHash.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Clones the provided span before storing the value internally.
            </summary>
            <param name="infoHash"></param>
        </member>
        <member name="M:MonoTorrent.InfoHash.Truncate">
            <summary>
            If this <see cref="T:MonoTorrent.InfoHash"/> object represents a SHA256 hash the return value will be the first
            20 bytes of the hash. If it represents a SHA1 hash the full (untruncated) value will be returned.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.InfoHash.FromMemory(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Stores the supplied value internally.
            </summary>
            <param name="infoHash"></param>
        </member>
        <member name="P:MonoTorrent.InfoHashes.V1">
            <summary>
            The SHA1 hash of the torrent's 'info' dictionary. Used by V1 torrents and hybrid v1/v2 torrents.
            </summary>
        </member>
        <member name="P:MonoTorrent.InfoHashes.V2">
            <summary>
            The SHA256 hash of the torrent's 'info' dictionary. Used by V2 torrents and hybrid v1/v2 torrents.
            </summary>
        </member>
        <member name="P:MonoTorrent.InfoHashes.V1OrV2">
            <summary>
            If the V1 hash is non-null, then it is returned. Otherwise the V2 hash is returned.
            As a result, the V1 hash will be returned if both the V1 and V2 hash are non-null.
            </summary>
        </member>
        <member name="M:MonoTorrent.InfoHashes.#ctor(MonoTorrent.BEncoding.RawInfoHashes)">
            <summary>
            Creates an 'InfoHashes' object using the BitTorrent V1 and/or BitTorrent V2 info hashes.
            </summary>
            <param name="rawInfoHashes"></param>
        </member>
        <member name="M:MonoTorrent.InfoHashes.#ctor(MonoTorrent.InfoHash,MonoTorrent.InfoHash)">
            <summary>
            Creates an 'InfoHashes' object using the BitTorrent V1 and/or BitTorrent V2 info hashes.
            </summary>
            <param name="sha1InfoHash"></param>
            <param name="sha256InfoHash"></param>
        </member>
        <member name="P:MonoTorrent.ITorrentFile.Path">
            <summary>
            The relative path to the file within the torrent.
            </summary>
        </member>
        <member name="P:MonoTorrent.ITorrentFile.StartPieceIndex">
            <summary>
            The first piece which contains data for this file
            </summary>
        </member>
        <member name="P:MonoTorrent.ITorrentFile.EndPieceIndex">
            <summary>
            The last piece which contains data for this file.
            </summary>
        </member>
        <member name="P:MonoTorrent.ITorrentFile.PieceCount">
            <summary>
            Returns the number of pieces for this file. This is the same as `<see cref="P:MonoTorrent.ITorrentFile.EndPieceIndex"/> - <see cref="P:MonoTorrent.ITorrentFile.StartPieceIndex"/> + 1`.
            </summary>
        </member>
        <member name="P:MonoTorrent.ITorrentFile.Length">
            <summary>
            The size of this file in bytes.
            </summary>
        </member>
        <member name="P:MonoTorrent.ITorrentFile.Padding">
            <summary>
            bep-0047 padding.
            </summary>
        </member>
        <member name="P:MonoTorrent.ITorrentFile.OffsetInTorrent">
            <summary>
            The offset, relative to the first byte in the torrent, where this file begins.
            </summary>
        </member>
        <member name="P:MonoTorrent.ITorrentFile.PiecesRoot">
            <summary>
            The root of the merkle tree constructed for this file. Generated using a SHA256 hash by BEP52 compliant torrents.
            </summary>
        </member>
        <member name="P:MonoTorrent.ITorrentManagerFile.BitField">
            <summary>
            The <see cref="P:MonoTorrent.ITorrentManagerFile.BitField"/> tracking which pieces of this file have been downloaded.
            </summary>
        </member>
        <member name="P:MonoTorrent.ITorrentManagerFile.FullPath">
            <summary>
            If the file is currently being downloaded, this will be the same as <see cref="P:MonoTorrent.ITorrentManagerFile.DownloadIncompleteFullPath"/>. Otherwise it will be <see cref="P:MonoTorrent.ITorrentManagerFile.DownloadCompleteFullPath"/>
            </summary>
        </member>
        <member name="P:MonoTorrent.ITorrentManagerFile.DownloadCompleteFullPath">
            <summary>
            The file will exist at this path after it has been fully downloaded.
            </summary>
        </member>
        <member name="P:MonoTorrent.ITorrentManagerFile.DownloadIncompleteFullPath">
            <summary>
            The file will exist at this path when it is partially downloaded. This value may be the same as <see cref="P:MonoTorrent.ITorrentManagerFile.DownloadCompleteFullPath"/>.
            </summary>
        </member>
        <member name="P:MonoTorrent.ITorrentManagerFile.Priority">
            <summary>
            The priority of the file when downloading.
            </summary>
        </member>
        <member name="P:MonoTorrent.ITorrentInfo.Files">
            <summary>
            The files contained within the Torrent
            </summary>
        </member>
        <member name="P:MonoTorrent.ITorrentInfo.InfoHashes">
            <summary>
            The infohashes for this torrent.
            </summary>
        </member>
        <member name="P:MonoTorrent.ITorrentInfo.Name">
            <summary>
            The name of the Torrent.
            </summary>
        </member>
        <member name="P:MonoTorrent.ITorrentInfo.PieceLength">
            <summary>
            The size, in bytes, of each piece. The final piece may be smaller.
            </summary>
        </member>
        <member name="P:MonoTorrent.ITorrentInfo.Size">
            <summary>
            The size, in bytes, of the torrent.
            </summary>
        </member>
        <member name="M:MonoTorrent.ITorrentInfoExtensions.PieceCount(MonoTorrent.ITorrentInfo)">
            <summary>
            The number of pieces in the torrent
            </summary>
            <param name="self"></param>
            <returns></returns>
        </member>
        <member name="P:MonoTorrent.ITorrentManagerInfo.Files">
            <summary>
            The files contained within the Torrent
            </summary>
        </member>
        <member name="M:MonoTorrent.ReadOnlyBitField.FirstFalse">
            <summary>
            Returns the index of the first <see langword="false" /> bit in the bitfield.
            Returns -1 if no <see langword="false" /> bit is found. />
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.ReadOnlyBitField.FirstFalse(System.Int32,System.Int32)">
            <summary>
            Returns the index of the first <see langword="false" /> bit between <paramref name="startIndex"/> and <paramref name="endIndex"/> (inclusive).
            Returns -1 if no <see langword="false" /> bit is found. />
            </summary>
            <param name="startIndex">The first index to check</param>
            <param name="endIndex">The last index to check</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.ReadOnlyBitField.FirstTrue">
            <summary>
            Returns the index of the first <see langword="true" /> bit in the bitfield.
            Returns -1 if no <see langword="true" /> bit is found. />
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.ReadOnlyBitField.FirstTrue(System.Int32,System.Int32)">
            <summary>
            Returns the index of the first <see langword="true" /> bit between <paramref name="startIndex"/> and <paramref name="endIndex"/> (inclusive).
            Returns -1 if no <see langword="true" /> bit is found. />
            </summary>
            <param name="startIndex">The first index to check</param>
            <param name="endIndex">The last index to check</param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.SpeedMonitor.AddDelta(System.Int32)">
            <summary>
            This method is threadsafe and can be called at any point.
            </summary>
            <param name="speed"></param>
        </member>
        <member name="P:MonoTorrent.GitInfoHelper.ClientVersion">
            <summary>
            The current version of the client in the form "MO1234", which represents a version triplet of '1.2.34'.
            </summary>
        </member>
        <member name="F:MonoTorrent.GitInfoHelper.Version">
            <summary>
            The full version of this library in the form 'A.B.C'.
            'A' and 'B' are guaranteed to be 1 digit each. 'C' can be one or two digits.
            </summary>
        </member>
        <member name="M:MonoTorrent.TorrentFileExtensions.FindFileByOffset(System.Collections.Generic.IList{MonoTorrent.ITorrentManagerFile},System.Int64)">
            <summary>
            Used for tests
            </summary>
            <param name="files"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:MonoTorrent.TorrentFileExtensions.FindFileByPieceIndex(System.Collections.Generic.IList{MonoTorrent.ITorrentManagerFile},System.Int32)">
            <summary>
            Used for tests
            </summary>
            <param name="files"></param>
            <param name="pieceIndex"></param>
            <returns></returns>
        </member>
        <member name="T:System.Runtime.CompilerServices.AsyncVoidMethodBuilder">
            <summary>
            A reimplementation of the built-in AsyncVoidMethodBuilder which is backed by
            <see cref="T:ReusableTasks.ReusableTask"/> instead of <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Create">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetException(System.Exception)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetResult">
            <summary>
            
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)">
            <summary>
            
            </summary>
            <param name="stateMachine"></param>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.Start``1(``0@)">
            <summary>
            
            </summary>
            <typeparam name="TStateMachine"></typeparam>
            <param name="stateMachine"></param>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitOnCompleted``2(``0@,``1@)">
            <summary>
            
            </summary>
            <typeparam name="TAwaiter"></typeparam>
            <typeparam name="TStateMachine"></typeparam>
            <param name="awaiter"></param>
            <param name="stateMachine"></param>
        </member>
        <member name="M:System.Runtime.CompilerServices.AsyncVoidMethodBuilder.AwaitUnsafeOnCompleted``2(``0@,``1@)">
            <summary>
            
            </summary>
            <typeparam name="TAwaiter"></typeparam>
            <typeparam name="TStateMachine"></typeparam>
            <param name="awaiter"></param>
            <param name="stateMachine"></param>
        </member>
        <member name="M:System.Numerics.BitOps.CeilLog2(System.Int32)">
            <summary>
            Returns the log2 of the passed value rounded up.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:ThisAssembly">
            <summary>Provides access to the current assembly information.</summary>
        </member>
        <member name="T:ThisAssembly.Git">
            <summary>Provides access to the git information for the current assembly.</summary>
        </member>
        <member name="F:ThisAssembly.Git.IsDirty">
            <summary>IsDirty: false</summary>
        </member>
        <member name="F:ThisAssembly.Git.IsDirtyString">
            <summary>IsDirtyString: false</summary>
        </member>
        <member name="F:ThisAssembly.Git.RepositoryUrl">
            <summary>Repository URL: git@github.com:alanmcgovern/monotorrent</summary>
        </member>
        <member name="F:ThisAssembly.Git.Branch">
            <summary>Branch: master</summary>
        </member>
        <member name="F:ThisAssembly.Git.Commit">
            <summary>Commit: e78faebd</summary>
        </member>
        <member name="F:ThisAssembly.Git.Sha">
            <summary>Sha: e78faebd0aec117146cffccaaea987ab0629eec0</summary>
        </member>
        <member name="F:ThisAssembly.Git.CommitDate">
            <summary>Commit date: 2024-08-04T11:51:08+01:00</summary>
        </member>
        <member name="F:ThisAssembly.Git.Commits">
            <summary>Commits on top of base version: 0</summary>
        </member>
        <member name="F:ThisAssembly.Git.Tag">
            <summary>Tag: </summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseTag">
            <summary>Base tag: </summary>
        </member>
        <member name="T:ThisAssembly.Git.BaseVersion">
            <summary>Provides access to the base version information used to determine the <see cref="T:ThisAssembly.Git.SemVer" />.</summary>      
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Major">
            <summary>Major: 3</summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Minor">
            <summary>Minor: 0</summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Patch">
            <summary>Patch: 2</summary>
        </member>
        <member name="T:ThisAssembly.Git.SemVer">
            <summary>Provides access to SemVer information for the current assembly.</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Major">
            <summary>Major: 3</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Minor">
            <summary>Minor: 0</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Patch">
            <summary>Patch: 2</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Label">
            <summary>Label: </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.DashLabel">
            <summary>Label with dash prefix: </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Source">
            <summary>Source: File</summary>
        </member>
    </members>
</doc>
